// Дана сторона квадрата a. Найти его площадь S=a^2
function squareArea(a){
  return a * 2
}

// Дано расстояние L в сантиметрах. Используя операцию деления нацело, 
// найти количество полных метров в нем (1 метр = 100 см)

function fullMeters(L){
  return Math.floor(L / 100)
}

// Дано целое число A. Проверить истинность высказывания: «Число A является положительным»
function numPositive(A) {
  return A > 0
}

// Даны два целых числа: A, B. Проверить истинность высказывания: 
// «Справедливы неравенства A > 2 и B ≤ 3»
function inequalityAreFair(A, B){
  return A > 2 && B <= 3
}

// Дано целое число. Если оно является положительным, то прибавить к нему 1; 
// в противном случае не изменять его.
function plusOne(N){
  return N > 0 ? N += 1 : N
}

// Даны три целых числа. Найти количество положительных и 
// количество отрицательных чисел в исходном наборе
// Вернуть строку формата: "Положительных чисел: 1, Отрицательных чисел: 1"
function positiveNegative(a, b, c){
  let positive = 0, negative = 0
  positive += a>0
  positive += b>0
  positive += c>0
  negative += a<0
  negative += b<0
  negative += c<0
  return `Положительных чисел: ${positive}, Отрицательных чисел: ${negative}`
}

// Дано целое число в диапазоне 1–7. Вернуть строку — название дня недели, 
// соответствующее данному числу (1 — «Понедельник», 2 — «Вторник» и т. д., 
// для других чисел вывести значение - «Неизвестно»)
function dayWeek(day){
  const week = ['Неизвестно', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']
  let result = day < 0 || day > 7 ? week[0] : week[day]
  return result
}

// Даны целые числа K и N. Вернуть строку в которой N раз повторяется число K
// При оттрицательном N вернуть "Ошибка"
function repeatNumber(K, N){
  let result = ""
  if(N>0){
      for(;N>0;N--){
          result += K
      }
  } else {
      result = "Ошибка"
  }
  return result
}
// Еще один вариант решения
function repeatOfNumber(K, N){
  return N < 1 ? 'Ошибка' : K.toString().repeat(N)
}

// Даны положительные числа A и B (A >= B). На отрезке длины A размещено максимально 
// возможное количество отрезков длины B (без наложений). Не используя операции 
// умножения и деления, найти длину незанятой части отрезка A.
// Вернуть строку формата "Длина незанятой части отрезка A: 1"